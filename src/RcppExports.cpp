// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// negativeLL_NBID
double negativeLL_NBID(Eigen::VectorXd x, Eigen::VectorXd counts, Eigen::VectorXd groups, Eigen::VectorXd size_factors, bool null_model);
RcppExport SEXP _codaDE_negativeLL_NBID(SEXP xSEXP, SEXP countsSEXP, SEXP groupsSEXP, SEXP size_factorsSEXP, SEXP null_modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type size_factors(size_factorsSEXP);
    Rcpp::traits::input_parameter< bool >::type null_model(null_modelSEXP);
    rcpp_result_gen = Rcpp::wrap(negativeLL_NBID(x, counts, groups, size_factors, null_model));
    return rcpp_result_gen;
END_RCPP
}
// gradient_NBID
Eigen::VectorXd gradient_NBID(Eigen::VectorXd x, Eigen::VectorXd counts, Eigen::VectorXd groups, Eigen::VectorXd size_factors, bool null_model);
RcppExport SEXP _codaDE_gradient_NBID(SEXP xSEXP, SEXP countsSEXP, SEXP groupsSEXP, SEXP size_factorsSEXP, SEXP null_modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type size_factors(size_factorsSEXP);
    Rcpp::traits::input_parameter< bool >::type null_model(null_modelSEXP);
    rcpp_result_gen = Rcpp::wrap(gradient_NBID(x, counts, groups, size_factors, null_model));
    return rcpp_result_gen;
END_RCPP
}
// optimize_NBID
Rcpp::List optimize_NBID(Eigen::VectorXd theta_init, Eigen::VectorXd counts, Eigen::VectorXd groups, Eigen::VectorXd size_factors, bool null_model, int maxit);
RcppExport SEXP _codaDE_optimize_NBID(SEXP theta_initSEXP, SEXP countsSEXP, SEXP groupsSEXP, SEXP size_factorsSEXP, SEXP null_modelSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type theta_init(theta_initSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type size_factors(size_factorsSEXP);
    Rcpp::traits::input_parameter< bool >::type null_model(null_modelSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(optimize_NBID(theta_init, counts, groups, size_factors, null_model, maxit));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_codaDE_negativeLL_NBID", (DL_FUNC) &_codaDE_negativeLL_NBID, 5},
    {"_codaDE_gradient_NBID", (DL_FUNC) &_codaDE_gradient_NBID, 5},
    {"_codaDE_optimize_NBID", (DL_FUNC) &_codaDE_optimize_NBID, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_codaDE(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
